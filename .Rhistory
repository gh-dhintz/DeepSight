# into the `dirs` variable. If you want to jump to `133-async-hold-inputs`, for
# example, you could do:
#
# ```r
# last_app <- which(grepl("133", dirs))
# rerun()
# ```
#
# To start over from the beginning, set `last_app <- 0L` (or call `reset()`).
dirs <- grep("^\\./\\d\\d\\d", list.dirs(recursive = FALSE), value = TRUE)
if (!exists("last_app")) {
last_app <- 0L
}
if (!exists("new_process")) {
new_process <- TRUE
}
# Args to pass to runApp()
if (!exists("port")) {
port <- 8000
}
if (!exists("launch_browser")) {
if (new_process) {
# If running apps in a separate process, default is to not to launch a browser.
launch_browser <- FALSE
} else {
# If running in this process, use the usual default.
launch_browser <- getOption("shiny.launch.browser", interactive())
}
}
if (!exists("display_mode")) {
display_mode <- "auto"
}
run_next <- function() {
if (last_app >= length(dirs)) {
message("No more apps!")
return(invisible(FALSE))
}
last_app <<- last_app + 1L
rerun()
}
run_app <- function(app, port, launch_browser, display_mode = "auto") {
message("Running ", app)
if (grepl("026", app) || grepl("169.*a$", app)) {
rmarkdown::run(
file.path(app, "index.Rmd"),
shiny_args = list(
port = port,
launch.browser = launch_browser,
display.mode = display_mode
)
)
} else {
shiny::runApp(
app,
port = port,
launch.browser = launch_browser,
display.mode = display_mode
)
}
}
# Run most recently run app, without advancing.
rerun <- function() {
if (last_app == 0L) {
warning("No app to run")
return()
}
args <- list(
app = dirs[[last_app]],
port = port,
launch_browser = launch_browser,
display_mode = display_mode
)
if (new_process & !grepl("^169", args$app)) {
callr::r(run_app, args, show = TRUE)
} else {
do.call(run_app, args)
}
}
skip_next <- function() {
if (last_app >= length())
last_app <<- last_app + 1L
message("Skipping ", dirs[[last_app]])
}
reset <- function() {
last_app <<- 0L
}
auto_run <- function() {
while (TRUE) {
tryCatch(
{
run_next()
break
},
interrupt = function(cond) {
message("Launching next app in 1 second...")
Sys.sleep(1)
}
)
}
}
url_links <- function(base_url) {
links <- paste0(base_url, sub("^\\.", "", dirs), "/")
cat(paste0(links, collapse = "\n"), "\n", sep = "")
invisible(links)
}
# Install packages needed for examples
source("install_deps.R", echo = TRUE)
shiny::runApp("./", display.mode = "normal")
source('app.R')
shiny::runApp("./", display.mode = "normal")
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
rmarkdown::render("pdf.Rmd",output_format = "tufte::tufte_handout")
rmarkdown::render("pdf.Rmd", output_format = "tufte::tufte_handout")
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
server <- function(input, output) {
regFormula <- reactive({
as.formula(paste('mpg ~', input$x))
})
output$regPlot <- renderPlot({
par(mar = c(4, 4, .1, .1))
plot(regFormula(), data = mtcars, pch = 19)
})
output$downloadReport <- downloadHandler(
filename = function() {
paste('my-report', switch(input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'), sep = '.')
},
content = function(file) {
if (input$format == "PDF") {
qmd_file <- "pdf.qmd"
# Run Quarto CLI directly in the app directory
result <- system2("quarto",
args = c("render", qmd_file,
"--to", "pdf",
"--output", "pdf.pdf",
"--output-dir", ".",
"--execute-params", sprintf("xvar='%s'", input$x)),
stdout = TRUE,
stderr = TRUE
)
cat(result, sep = "\n")  # log CLI output for debugging
if (!file.exists("pdf.pdf")) {
stop("PDF generation failed. See Quarto logs above.")
}
file.copy("pdf.pdf", file, overwrite = TRUE)
} else {
rmd_file <- switch(input$format,
HTML = "html.Rmd",
Word = "word.Rmd")
library(rmarkdown)
out <- render(rmd_file, switch(
input$format,
HTML = html_document(),
Word = word_document()
))
file.rename(out, file)
}
}
)
}
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
getwd()
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp()
source('app.R')
runApp()
runApp()
source('app.R')
runApp()
shiny::runApp("app.R")
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(quarto)
ui <- fluidPage(
titlePanel("Multiple Regression Plots"),
sidebarLayout(
sidebarPanel(
selectInput("plotA_x", "X Variable for Plot A:", choices = names(mtcars), selected = "hp"),
selectInput("plotB_x", "X Variable for Plot B:", choices = names(mtcars), selected = "wt"),
selectInput("format", "Report Format:", choices = c("PDF", "HTML", "Word")),
downloadButton("downloadReport", "Download Report")
),
mainPanel(
tabsetPanel(
tabPanel("Plot A", plotOutput("regPlotA")),
tabPanel("Plot B", plotOutput("regPlotB"))
)
)
)
)
server <- function(input, output) {
regFormulaA <- reactive({
as.formula(paste("mpg ~", input$plotA_x))
})
regFormulaB <- reactive({
as.formula(paste("mpg ~", input$plotB_x))
})
output$regPlotA <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaA(), data = mtcars, pch = 19, main = "Plot A")
})
output$regPlotB <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaB(), data = mtcars, pch = 19, col = "blue", main = "Plot B")
})
output$downloadReport <- downloadHandler(
filename = function() {
paste("my-report", switch(input$format,
PDF = "pdf",
HTML = "html",
Word = "docx"), sep = ".")
},
content = function(file) {
fmt <- switch(input$format,
PDF = list(input = "my_pdf_doc.qmd",  format = "pdf",  ext = "pdf"),
HTML = list(input = "html.qmd", format = "html", ext = "html"),
Word = list(input = "word.qmd", format = "docx", ext = "docx"))
out_file <- paste0("report.", fmt$ext)
result <- tryCatch({
quarto::quarto_render(
input = fmt$input,
output_file = out_file,
output_format = fmt$format,
execute_params = list(
xvarA = input$plotA_x,
xvarB = input$plotB_x
),
execute_dir = getwd()
)
}, error = function(e) {
stop("Document generation failed: ", e$message)
})
if (!file.exists(out_file)) {
stop("Document generation failed: output not found.")
}
file.copy(out_file, file, overwrite = TRUE)
}
)
}
shinyApp(ui, server)
library(shiny)
library(quarto)
ui <- fluidPage(
titlePanel("Multiple Regression Plots"),
sidebarLayout(
sidebarPanel(
selectInput("plotA_x", "X Variable for Plot A:", choices = names(mtcars), selected = "hp"),
selectInput("plotB_x", "X Variable for Plot B:", choices = names(mtcars), selected = "wt"),
selectInput("format", "Report Format:", choices = c("PDF", "HTML", "Word")),
downloadButton("downloadReport", "Download Report")
),
mainPanel(
tabsetPanel(
tabPanel("Plot A", plotOutput("regPlotA")),
tabPanel("Plot B", plotOutput("regPlotB"))
)
)
)
)
server <- function(input, output) {
regFormulaA <- reactive({
as.formula(paste("mpg ~", input$plotA_x))
})
regFormulaB <- reactive({
as.formula(paste("mpg ~", input$plotB_x))
})
output$regPlotA <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaA(), data = mtcars, pch = 19, main = "Plot A")
})
output$regPlotB <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaB(), data = mtcars, pch = 19, col = "blue", main = "Plot B")
})
output$downloadReport <- downloadHandler(
filename = function() {
paste("my-report", switch(input$format,
PDF = "pdf",
HTML = "html",
Word = "docx"), sep = ".")
},
content = function(file) {
fmt <- switch(input$format,
PDF = list(input = "my_pdf_doc.qmd",  format = "pdf",  ext = "pdf"),
HTML = list(input = "html.qmd", format = "html", ext = "html"),
Word = list(input = "word.qmd", format = "docx", ext = "docx"))
out_file <- paste0("report.", fmt$ext)
result <- tryCatch({
quarto::quarto_render(
input = fmt$input,
output_file = out_file,
output_format = fmt$format,
execute_params = list(
xvarA = input$plotA_x,
xvarB = input$plotB_x
),
execute_dir = getwd()
)
}, error = function(e) {
stop("Document generation failed: ", e$message)
})
if (!file.exists(out_file)) {
stop("Document generation failed: output not found.")
}
file.copy(out_file, file, overwrite = TRUE)
}
)
}
shinyApp(ui, server)
library(shiny)
library(quarto)
ui <- fluidPage(
titlePanel("Multiple Regression Plots"),
sidebarLayout(
sidebarPanel(
selectInput("plotA_x", "X Variable for Plot A:", choices = names(mtcars), selected = "hp"),
selectInput("plotB_x", "X Variable for Plot B:", choices = names(mtcars), selected = "wt"),
selectInput("format", "Report Format:", choices = c("PDF", "HTML", "Word")),
downloadButton("downloadReport", "Download Report")
),
mainPanel(
tabsetPanel(
tabPanel("Plot A", plotOutput("regPlotA")),
tabPanel("Plot B", plotOutput("regPlotB"))
)
)
)
)
server <- function(input, output) {
regFormulaA <- reactive({
as.formula(paste("mpg ~", input$plotA_x))
})
regFormulaB <- reactive({
as.formula(paste("mpg ~", input$plotB_x))
})
output$regPlotA <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaA(), data = mtcars, pch = 19, main = "Plot A")
})
output$regPlotB <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaB(), data = mtcars, pch = 19, col = "blue", main = "Plot B")
})
output$downloadReport <- downloadHandler(
filename = function() {
paste("my-report", switch(input$format,
PDF = "pdf",
HTML = "html",
Word = "docx"), sep = ".")
},
content = function(file) {
fmt <- switch(input$format,
PDF = list(input = "my_pdf_doc.qmd",  format = "pdf",  ext = "pdf"),
HTML = list(input = "html.qmd", format = "html", ext = "html"),
Word = list(input = "word.qmd", format = "docx", ext = "docx"))
out_file <- paste0("report.", fmt$ext)
result <- tryCatch({
quarto::quarto_render(
input = fmt$input,
output_file = out_file,
output_format = fmt$format,
execute_params = list(
xvarA = input$plotA_x,
xvarB = input$plotB_x
),
execute_dir = getwd()
)
}, error = function(e) {
stop("Document generation failed: ", e$message)
})
if (!file.exists(out_file)) {
stop("Document generation failed: output not found.")
}
file.copy(out_file, file, overwrite = TRUE)
}
)
}
shinyApp(ui, server)
library(shiny)
library(quarto)
ui <- fluidPage(
titlePanel("Multiple Regression Plots"),
sidebarLayout(
sidebarPanel(
selectInput("plotA_x", "X Variable for Plot A:", choices = names(mtcars), selected = "hp"),
selectInput("plotB_x", "X Variable for Plot B:", choices = names(mtcars), selected = "wt"),
selectInput("format", "Report Format:", choices = c("PDF", "HTML", "Word")),
downloadButton("downloadReport", "Download Report")
),
mainPanel(
tabsetPanel(
tabPanel("Plot A", plotOutput("regPlotA")),
tabPanel("Plot B", plotOutput("regPlotB"))
)
)
)
)
server <- function(input, output) {
regFormulaA <- reactive({
as.formula(paste("mpg ~", input$plotA_x))
})
regFormulaB <- reactive({
as.formula(paste("mpg ~", input$plotB_x))
})
output$regPlotA <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaA(), data = mtcars, pch = 19, main = "Plot A")
})
output$regPlotB <- renderPlot({
par(mar = c(4, 4, 0.1, 0.1))
plot(regFormulaB(), data = mtcars, pch = 19, col = "blue", main = "Plot B")
})
output$downloadReport <- downloadHandler(
filename = function() {
paste("my-report", switch(input$format,
PDF = "pdf",
HTML = "html",
Word = "docx"), sep = ".")
},
content = function(file) {
fmt <- switch(input$format,
PDF = list(input = "my_pdf_doc.qmd",  format = "pdf",  ext = "pdf"),
HTML = list(input = "html.qmd", format = "html", ext = "html"),
Word = list(input = "word.qmd", format = "docx", ext = "docx"))
out_file <- paste0("report.", fmt$ext)
result <- tryCatch({
quarto::quarto_render(
input = fmt$input,
output_file = out_file,
output_format = fmt$format,
execute_params = list(
xvarA = input$plotA_x,
xvarB = input$plotB_x
),
execute_dir = getwd()
)
}, error = function(e) {
stop("Document generation failed: ", e$message)
})
if (!file.exists(out_file)) {
stop("Document generation failed: output not found.")
}
file.copy(out_file, file, overwrite = TRUE)
}
)
}
shinyApp(ui, server)
options(download.file.method = 'libcurl'); devtools::install_local('/private/tmp/GUD81947_0.2.0.tgz', dependencies = TRUE, upgrade = 'always')
options(download.file.method = 'libcurl'); devtools::install_local('/Users/dhintz/Downloads/GUD81947\ 0.2.0.tar.gz', dependencies = TRUE, upgrade = 'always')
