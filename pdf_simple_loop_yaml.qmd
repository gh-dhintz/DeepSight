---
title: "`r params$title`"
subtitle: "`r params$subitle`"
author:
  - name: "`r params$name`"
    affiliations:
      - name: University of Hamburg
        department: Biology Department
      - name: Institute of Something
        address: Hamburg, Germany
    email: jane.doe@uni-hamburg.de
  - name: Jane Doe
    affiliations:
      - name: University of Hamburg
        department: Biology Department
date: "`r Sys.Date()`"
### Comment or remove the following line if NO summary should be shown on the title page
abstract: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut elit odio. Donec fermentum tellus neque, vitae fringilla orci pretium vitae. Fusce maximus finibus facilisis. Donec ut ullamcorper turpis. Donec ut porta ipsum. Nullam cursus mauris a sapien ornare pulvinar. Aenean malesuada molestie erat quis mattis. Praesent scelerisque posuere faucibus."
logo1: images/company_logo2.png  # logo on left side of title page
logo2: images/moto2.png  # logo on right side of title page
### Uncomment the following line if the document language is German
# language: custom_lang.yml
### Comment or remove the following two lines if NO references are used
bibliography: [bib/references.bib, bib/packages.bib] # Path to bibliography files 
csl: bib/sage-harvard.csl                            # Path to reference style file
### Settings for rendering the document:
format: 
  pdf:
    documentclass: scrbook  
    classoption: ["onepage", "openany"]
    geometry:   
      - top=25mm     # margin settings
      - bottom=35mm
      - left=25mm
      - right=25mm
      - heightrounded
    template-partials:
      - "styles/before-body.tex"
      - "styles/_titlepage.tex" 
      - "styles/_coverpage.tex" 
    include-in-header:
    - "styles/in-header.tex"
    - text: |
        % Make entire TOC entries clickable, not just page numbers
        \hypersetup{
          linktocpage=false,
          linktoc=all
        }
    # Options for front cover
    cover-bg-image: "images/cover.png"
    cover-page-color: "FFFFFF"  # provide hex color code
    cover-text-color: "3A515C"  # provide hex color code
    cover-fade-effect: true
    # Options for table of content
    toc: true
    toc-depth: 3
    toc-title: Contents       # remove line or adjust if language is German
    number-sections: true
    number-depth: 3
    lof: false  # list of figures
    lot: false  # list of tables
    # CLICKABLE LINKS SETTINGS
    colorlinks: true
    linkcolor: blue          # Color for internal links (TOC, cross-references)
    urlcolor: blue           # Color for external URLs
    citecolor: blue          # Color for citation links
    toccolor: blue           # Color specifically for TOC links
    links-as-notes: false    # Prevents links from becoming footnotes
    link-citations: true     # Makes citations clickable
    # Additional hyperref options for better navigation
    hyperrefoptions:
      - bookmarks=true       # Creates PDF bookmarks (sidebar navigation)
      - bookmarksopen=true   # Opens bookmarks panel by default
      - bookmarksnumbered=true # Numbers bookmarks
      - pdfpagemode=UseOutlines # Opens PDF with bookmarks visible
      - pdftoolbar=true      # Shows PDF toolbar
      - pdfmenubar=true      # Shows PDF menu bar
      - pdffitwindow=false   # Don't fit window to page
      - pdfstartview=FitH    # Fit width on open
      - colorlinks=true      # Ensure colored links
      - linktocpage=false    # Make titles clickable, not just page numbers
    crossref: 
      chapters: false     # set to 'true' if figure numbering should follow subsections
      fig-prefix: Fig.    # (default is 'Figure'; adjust if language is German)
    # Code options:
    highlight-style: arrow # default 
execute:
  echo: false
  warning: false
  message: false
fig-align: center
editor: source
params:
  title: "My Title"
  subitle: "My Sub-Title"
  name: "John Doe"
---

```{r}
#| label: load-packages-and-params
#| include: false

# Load packages
library(knitr)
library(ggplot2)
library(yaml)

# Read parameters from YAML file
if (file.exists("report_params.yaml")) {
  yaml_data <- yaml::read_yaml("report_params.yaml")
  params <- yaml_data$params
} else {
  stop("report_params.yaml was not created")
}

# Set up colors
color_bg <- "#FFFFFF"
color_plot_background <- "#FFFFFF"
color_fg <- "#0B1C72"
color_primary <- "#D62727"
color_success <- "#8A9C40"
color_warning <- "#FFA500"
color_plotA_point <- color_primary
color_plotA_line <- color_warning
color_plotB_point <- color_success
color_plotB_line <- color_warning
```


```{r, collapse=TRUE}
#| label: print-params

options(digits = 4)

#print(params)
```

```{r}
#| label: load-and-preproc-params

# Get all Plot A parameters that are not NULL
plotA_x_params <- params[grepl("^plotA_x_", names(params))]
plotA_x_params <- plotA_x_params[!sapply(plotA_x_params, is.null)]
plotA_subcap_params <- params[grepl("^plotA_SubCaption_", names(params))]
plotA_subcap_params <- plotA_subcap_params[!sapply(plotA_subcap_params, is.null)]

# Get all Plot B parameters that are not NULL
plotB_x_params <- params[grepl("^plotB_x_", names(params))]
plotB_x_params <- plotB_x_params[!sapply(plotB_x_params, is.null)]
plotB_subcap_params <- params[grepl("^plotB_SubCaption_", names(params))]
plotB_subcap_params <- plotB_subcap_params[!sapply(plotB_subcap_params, is.null)]
```

# Dynamic Report

See [site](`r params$bookmark_url`)

## Regression Analysis

Here are my regression models:

### Plot A Models

```{r, collapse=TRUE, results='asis'}

if (length(plotA_x_params) > 0) {
  for (i in 1:length(plotA_x_params)) {
    param_name <- names(plotA_x_params)[i]
    x_var <- plotA_x_params[[i]]
    
    cat("\n#### Plot A", i, "\n")
    cat("Variable:", x_var, "\n\n")
    
    fml <- as.formula(paste("mpg ~", x_var))
    fit <- lm(fml, data = mtcars)
    b <- coef(fit)
    
    print(summary(fit))
    cat("\nThe fitting result is: mpg =", round(b[1], 4), "+", round(b[2], 4), "*", x_var, "\n\n")
  }
} else {
  cat("No Plot A variables configured.\n\n")
}
```

### Plot B Models


```{r, collapse=TRUE, results='asis'}

if (length(plotB_x_params) > 0) {
  for (i in 1:length(plotB_x_params)) {
    param_name <- names(plotB_x_params)[i]
    x_var <- plotB_x_params[[i]]
    
    cat("\n#### Plot B", i, "\n")
    cat("Variable:", x_var, "\n\n")
    
    fml <- as.formula(paste("mpg ~", x_var))
    fit <- lm(fml, data = mtcars)
    b <- coef(fit)
    
    print(summary(fit))
    cat("\nThe fitting result is: mpg =", round(b[1], 4), "+", round(b[2], 4), "*", x_var, "\n\n")
  }
} else {
  cat("No Plot B variables configured.\n\n")
}
```

## Scatter Plots with Regression Lines
### Plot A Visualizations


```{r}
#| label: set-knitr-chunk-params-plotA

# Set Subcaption  
if (all(sapply(plotA_subcap_params, function(x) x == "")) && params$plotA_n > 1){
  # set defualt captions if there are mulitple 'A' plots but no subcaptions were provided
  subcaption <- sapply(plotA_x_params, function(x) paste0("Var: ", x))
} else {
  # if captions provided, assign captions 
  subcaption <- plotA_subcap_params
}

if(params$plotA_n > 1){
  fig.cap = params$plotA_caption_shared
  layout.ncol = 2
  fig.subcap = subcaption
} else {
  fig.cap = params$plotA_caption_shared
  layout.ncol = NULL
  fig.subcap = NULL
}

# fig.subcap has to be set with `knitr::opts_chunk$set`
knitr::opts_chunk$set(fig.subcap = subcaption)
```


```{r}
#| label: fig-plotA
#| fig-height: 4
#| fig-width: 5
#| fig-cap: !expr fig.cap
#| layout-ncol: !expr layout.ncol

if (length(plotA_x_params) > 0) {
  for (i in 1:length(plotA_x_params)) {
    x_var <- plotA_x_params[[i]]
    
    p <- ggplot(mtcars, aes(x = .data[[x_var]], y = mpg)) +
      geom_point(color = color_plotA_point, size = 3) +
      geom_smooth(method = "lm", se = FALSE, color = color_plotA_line) +
      theme_minimal() +
      labs(title = paste("Plot A", i), x = x_var, y = "mpg") +
      theme(
        plot.background = element_rect(fill = color_plot_background, color = NA),
        panel.background = element_rect(fill = color_plot_background, color = NA),
        text = element_text(color = color_fg),
        axis.text = element_text(color = color_fg),
        axis.title = element_text(color = color_fg),
        plot.title = element_text(face = "bold")
      )
    
    print(p)
  }
}
```

```{r, results='asis'}
#| label: plotA-notes

# Add notes if they exist
if (params$plotA_notes_shared != "") {
  cat("\n**Notes for Plot A :**", params$plotA_notes_shared, "\n\n")
  }
```

See @fig-plotA-1.

See knitr settings below.

```{r}
sink('knitr_chunk_opts.txt')
print(knitr::opts_chunk$get())
sink()
```

### Plot B Visualizations

```{r}
#| label: set-knitr-chunk-params-plotB

# Set Subcaption  
if (all(sapply(plotB_subcap_params, function(x) x == "")) && params$plotB_n > 1){
  # set defualt captions if there are mulitple 'A' plots but no subcaptions were provided
  subcaption <- sapply(plotB_x_params, function(x) paste0("Var: ", x))
} else {
  # if captions provided, assign captions 
  subcaption <- plotB_subcap_params
}

if(params$plotB_n > 1){
  fig.cap = params$plotB_caption_shared
  layout.ncol = 2
  fig.subcap = subcaption
} else {
  fig.cap = params$plotB_caption_shared
  layout.ncol = NULL
  fig.subcap = NULL
}

# fig.subcap has to be set with `knitr::opts_chunk$set`
knitr::opts_chunk$set(fig.subcap = subcaption)
```


```{r}
#| label: fig-plotB
#| fig-height: 4
#| fig-width: 5
#| fig-cap: !expr fig.cap
#| layout-ncol: !expr layout.ncol

if (length(plotB_x_params) > 0) {
  for (i in 1:length(plotB_x_params)) {
    x_var <- plotB_x_params[[i]]
    
    p <- ggplot(mtcars, aes(x = .data[[x_var]], y = mpg)) +
      geom_point(color = color_plotB_point, size = 3) +
      geom_smooth(method = "lm", se = FALSE, color = color_plotB_line) +
      theme_minimal() +
      labs(title = paste("Plot B", i), x = x_var, y = "mpg") +
      theme(
        plot.background = element_rect(fill = color_plot_background, color = NA),
        panel.background = element_rect(fill = color_plot_background, color = NA),
        text = element_text(color = color_fg),
        axis.text = element_text(color = color_fg),
        axis.title = element_text(color = color_fg),
        plot.title = element_text(face = "bold")
      )
    
    print(p)
  }
}
```

```{r, results='asis'}
#| label: plotB-notes

# Add notes if they exist
if (params$plotB_notes_shared != "") {
  cat("\n**Notes for Plot B :**", params$plotB_notes_shared, "\n\n")
  }
```