---
title: "`r params$title`"  
subtitle: "`r params$subtitle`"
author: "`r params$name`"
date: "`r Sys.Date()`"
### Uncomment the following line if a summary should be shown after the title 
# abstract: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr." 
lang: en # German would be 'de'
### Comment or remove the following two lines if NO references are used
#bibliography: [bib/references.bib, bib/packages.bib] # Path to bibliography files 
#csl: bib/sage-harvard.csl                            # Path to reference style file
### Settings for rendering the document:
format: 
  docx:
    toc: true
    toc-depth: 3
    toc-title: Contents
    number-sections: true
    reference-doc: "uhh-template-helvetica.docx"
    crossref: 
      chapters: false     # set to 'true' if figure numbering should follow subsections
      fig-prefix: Fig.    # (default is 'Figure'; adjust if language is German)
    # Code options:
    highlight-style: arrow # default
execute:
  echo: false
  warning: false
  message: false
editor: source
params:
  title: null
  subtitle: null
  name: null
---

```{r}
#| label: load-packages-and-vars
#| include: false

# Load packages
library(knitr)
library(ggplot2)
library(yaml)

# Read plot vars from YAML file
# Data structure: params (metadata via execute_params) + vars 
if (file.exists("report_vars.yaml")) {
  yaml_data <- yaml::read_yaml("report_vars.yaml")
  vars <- yaml_data$vars  # Plot variables
  # Note: metadata (title, subtitle, name) comes via execute_params, not from YAML
} else {
  stop("report_vars.yaml was not created")
}

# Set up colors
color_bg <- "#FFFFFF"
color_plot_background <- "#FFFFFF"
color_fg <- "#0B1C72"
color_primary <- "#D62727"
color_success <- "#8A9C40"
color_warning <- "#FFA500"
color_plotA_point <- color_primary
color_plotA_line <- color_warning
color_plotB_point <- color_success
color_plotB_line <- color_warning
```


```{r, collapse=TRUE}
#| label: options-config

options(digits = 4)

#print(vars)
```

```{r}
#| label: load-and-preproc-vars

# Get all Plot A parameters that are not NULL
plotA_x_params <- vars[grepl("^plotA_x_", names(vars))]
plotA_x_params <- plotA_x_params[!sapply(plotA_x_params, is.null)]
plotA_subcap_params <- vars[grepl("^plotA_SubCaption_", names(vars))]
plotA_subcap_params <- plotA_subcap_params[!sapply(plotA_subcap_params, is.null)]

# Get all Plot B parameters that are not NULL
plotB_x_params <- vars[grepl("^plotB_x_", names(vars))]
plotB_x_params <- plotB_x_params[!sapply(plotB_x_params, is.null)]
plotB_subcap_params <- vars[grepl("^plotB_SubCaption_", names(vars))]
plotB_subcap_params <- plotB_subcap_params[!sapply(plotB_subcap_params, is.null)]
```

# Dynamic Report

See [site](`r vars$bookmark_url`)

## Regression Analysis

Here are my regression models:

### Plot A Models

```{r, collapse=TRUE, results='asis'}

if (length(plotA_x_params) > 0) {
  for (i in 1:length(plotA_x_params)) {
    param_name <- names(plotA_x_params)[i]
    x_var <- plotA_x_params[[i]]
    
    cat("\n#### Plot A", i, "\n")
    cat("Variable:", x_var, "\n\n")
    
    fml <- as.formula(paste("mpg ~", x_var))
    fit <- lm(fml, data = mtcars)
    b <- coef(fit)
    
    print(summary(fit))
    cat("\nThe fitting result is: mpg =", round(b[1], 4), "+", round(b[2], 4), "*", x_var, "\n\n")
  }
} else {
  cat("No Plot A variables configured.\n\n")
}
```

### Plot B Models


```{r, collapse=TRUE, results='asis'}

if (length(plotB_x_params) > 0) {
  for (i in 1:length(plotB_x_params)) {
    param_name <- names(plotB_x_params)[i]
    x_var <- plotB_x_params[[i]]
    
    cat("\n#### Plot B", i, "\n")
    cat("Variable:", x_var, "\n\n")
    
    fml <- as.formula(paste("mpg ~", x_var))
    fit <- lm(fml, data = mtcars)
    b <- coef(fit)
    
    print(summary(fit))
    cat("\nThe fitting result is: mpg =", round(b[1], 4), "+", round(b[2], 4), "*", x_var, "\n\n")
  }
} else {
  cat("No Plot B variables configured.\n\n")
}
```

## Scatter Plots with Regression Lines
### Plot A Visualizations


```{r}
#| label: set-knitr-chunk-params-plotA

# Set Subcaption  
if (all(sapply(plotA_subcap_params, function(x) x == "")) && vars$plotA_n > 1){
  # set default captions if there are multiple 'A' plots but no subcaptions were provided
  subcaption <- sapply(plotA_x_params, function(x) paste0("Var: ", x))
} else {
  # if captions provided, assign captions 
  subcaption <- plotA_subcap_params
}

if(vars$plotA_n > 1){
  fig.cap = vars$plotA_caption_shared
  layout.ncol = 2
  fig.subcap = subcaption
} else {
  fig.cap = vars$plotA_caption_shared
  layout.ncol = NULL
  fig.subcap = NULL
}

# fig.subcap has to be set with `knitr::opts_chunk$set`
knitr::opts_chunk$set(fig.subcap = subcaption)
```


```{r}
#| label: fig-plotA
#| fig-height: 4
#| fig-width: 5
#| fig-cap: !expr fig.cap
#| layout-ncol: !expr layout.ncol

if (length(plotA_x_params) > 0) {
  for (i in 1:length(plotA_x_params)) {
    x_var <- plotA_x_params[[i]]
    
    p <- ggplot(mtcars, aes(x = .data[[x_var]], y = mpg)) +
      geom_point(color = color_plotA_point, size = 3) +
      geom_smooth(method = "lm", se = FALSE, color = color_plotA_line) +
      theme_minimal() +
      labs(title = paste("Plot A", i), x = x_var, y = "mpg") +
      theme(
        plot.background = element_rect(fill = color_plot_background, color = NA),
        panel.background = element_rect(fill = color_plot_background, color = NA),
        text = element_text(color = color_fg),
        axis.text = element_text(color = color_fg),
        axis.title = element_text(color = color_fg),
        plot.title = element_text(face = "bold")
      )
    
    print(p)
  }
}
```

```{r, results='asis'}
#| label: plotA-notes

# Add notes if they exist
if (vars$plotA_notes_shared != "") {
  cat("\n**Notes for Plot A :**", vars$plotA_notes_shared, "\n\n")
  }
```

See @fig-plotA-1.

See knitr settings below.

```{r}
sink('knitr_chunk_opts.txt')
print(knitr::opts_chunk$get())
sink()
```

### Plot B Visualizations

```{r}
#| label: set-knitr-chunk-params-plotB

# Set Subcaption  
if (all(sapply(plotB_subcap_params, function(x) x == "")) && vars$plotB_n > 1){
  # set default captions if there are multiple 'B' plots but no subcaptions were provided
  subcaption <- sapply(plotB_x_params, function(x) paste0("Var: ", x))
} else {
  # if captions provided, assign captions 
  subcaption <- plotB_subcap_params
}

if(vars$plotB_n > 1){
  fig.cap = vars$plotB_caption_shared
  layout.ncol = 2
  fig.subcap = subcaption
} else {
  fig.cap = vars$plotB_caption_shared
  layout.ncol = NULL
  fig.subcap = NULL
}

# fig.subcap has to be set with `knitr::opts_chunk$set`
knitr::opts_chunk$set(fig.subcap = subcaption)
```


```{r}
#| label: fig-plotB
#| fig-height: 4
#| fig-width: 5
#| fig-cap: !expr fig.cap
#| layout-ncol: !expr layout.ncol

if (length(plotB_x_params) > 0) {
  for (i in 1:length(plotB_x_params)) {
    x_var <- plotB_x_params[[i]]
    
    p <- ggplot(mtcars, aes(x = .data[[x_var]], y = mpg)) +
      geom_point(color = color_plotB_point, size = 3) +
      geom_smooth(method = "lm", se = FALSE, color = color_plotB_line) +
      theme_minimal() +
      labs(title = paste("Plot B", i), x = x_var, y = "mpg") +
      theme(
        plot.background = element_rect(fill = color_plot_background, color = NA),
        panel.background = element_rect(fill = color_plot_background, color = NA),
        text = element_text(color = color_fg),
        axis.text = element_text(color = color_fg),
        axis.title = element_text(color = color_fg),
        plot.title = element_text(face = "bold")
      )
    
    print(p)
  }
}
```

```{r, results='asis'}
#| label: plotB-notes

# Add notes if they exist
if (vars$plotB_notes_shared != "") {
  cat("\n**Notes for Plot B :**", vars$plotB_notes_shared, "\n\n")
  }
```