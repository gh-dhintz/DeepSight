---
title: "`r params$title`"
subtitle: "`r params$subtitle`"
author:
  - name: "`r params$name`"
    affiliations:
      - name: University of Hamburg
        department: Biology Department
      - name: Institute of Something
        address: Hamburg, Germany
    email: jane.doe@uni-hamburg.de
  - name: John Doe
    affiliations:
      - name: University of Hamburg
        department: Biology Department
date: "`r Sys.Date()`"
### Comment or remove the following line if NO summary should be shown on the title page
abstract: "Abstract goes here."
logo1: images/company_logo3.png  # logo on left side of title page
logo2: images/moto_light.png  # logo on right side of title page
### Uncomment the following line if the document language is German
# language: custom_lang.yml
### Comment or remove the following two lines if NO references are used
bibliography: [bib/references.bib, bib/packages.bib] # Path to bibliography files 
csl: bib/sage-harvard.csl                            # Path to reference style file
### Settings for rendering the document:
format: 
  pdf:
    documentclass: scrbook  
    classoption: ["onepage", "openany"]
    geometry:   
      - top=25mm     # margin settings
      - bottom=35mm
      - left=25mm
      - right=25mm
      - heightrounded
    template-partials:
      - "styles/before-body.tex"
      - "styles/_titlepage.tex" 
      - "styles/_coverpage.tex" 
    include-in-header:
    - "styles/in-header.tex"
    - text: |
        % Make entire TOC entries clickable, not just page numbers
        \hypersetup{
          linktocpage=false,
          linktoc=all
        }
    - text: |
        % Prevent blank pages before chapters
        \KOMAoptions{twoside=false}
        \raggedbottom
        \makeatletter
        \renewcommand*{\cleardoublepage}{\clearpage}
        \makeatother
    # Options for front cover
    cover-bg-image: "images/cover.png"
    cover-page-color: "FFFFFF"  # provide hex color code
    cover-text-color: "3A515C"  # provide hex color code
    cover-fade-effect: true
    # Options for table of content
    toc: true
    toc-depth: 3
    toc-title: Contents       # remove line or adjust if language is German
    number-sections: true
    number-depth: 3
    lof: false  # list of figures
    lot: false  # list of tables
    # CLICKABLE LINKS SETTINGS
    colorlinks: true
    linkcolor: blue          # Color for internal links (TOC, cross-references)
    urlcolor: blue           # Color for external URLs
    citecolor: blue          # Color for citation links
    toccolor: blue           # Color specifically for TOC links
    links-as-notes: false    # Prevents links from becoming footnotes
    link-citations: true     # Makes citations clickable
    # Additional hyperref options for better navigation
    hyperrefoptions:
      - bookmarks=true       # Creates PDF bookmarks (sidebar navigation)
      - bookmarksopen=true   # Opens bookmarks panel by default
      - bookmarksnumbered=true # Numbers bookmarks
      - pdfpagemode=UseOutlines # Opens PDF with bookmarks visible
      - pdftoolbar=true      # Shows PDF toolbar
      - pdfmenubar=true      # Shows PDF menu bar
      - pdffitwindow=false   # Don't fit window to page
      - pdfstartview=FitH    # Fit width on open
      - colorlinks=true      # Ensure colored links
      - linktocpage=false    # Make titles clickable, not just page numbers
    crossref: 
      chapters: false     # set to 'true' if figure numbering should follow subsections
      fig-prefix: Fig.    # (default is 'Figure'; adjust if language is German)
    # Code options:
    highlight-style: arrow # default 
execute:
  echo: false
  warning: false
  message: false
fig-align: center
editor: source
params:
  title: null
  subtitle: null
  name: null
---

```{r}
#| label: load-packages-and-vars
#| echo: false

# Load packages
library(knitr)
library(ggplot2)
library(yaml)
library(dplyr)
library(patchwork)
library(showtext)
library(gt)

# Read plot vars from YAML file
# Data structure: params (metadata via execute_params) + vars 
if (file.exists("report_vars.yaml")) {
  yaml_data <- yaml::read_yaml("report_vars.yaml")
  vars <- yaml_data$vars  # Plot variables
  # Note: metadata (title, subtitle, name) comes via execute_params, not from YAML
} else {
  stop("report_vars.yaml was not created")
}

# Set up colors
color_bg <- "#F8F9FA"
color_panel_bg <- "#FFFFFF"
color_outer_bg <- "#ECECEC"
color_fg <- "#212529"
color_primary <- "#cc4c02"
color_secondary <- "#636363"

```

```{r}
#| label: Loading-fonts

# Register your custom fonts
font_add("HelveticaNeue-Light", "Helvetica_Neue_Fonts/HelveticaNeueLTStd-Lt.otf")
font_add("HelveticaNeue-Regular", "Helvetica_Neue_Fonts/HelveticaNeueLTStd-Roman.otf") 
font_add("HelveticaNeue-Italic", "Helvetica_Neue_Fonts/HelveticaNeueLTStd-It.otf")
font_add("HelveticaNeue-Medium", "Helvetica_Neue_Fonts/HelveticaNeueLTStd-Md.otf")
font_add("HelveticaNeue-Bold", "Helvetica_Neue_Fonts/HelveticaNeueLTStd-Bd.otf")

# Enable showtext for rendering
showtext_auto()
```
```{r}
#| label: options-config

options(digits = 4)

#print(vars)
```

```{r}
#| label: load-and-preproc-vars

# Get all Plot A parameters that are not NULL
plot_A_params <- vars[grepl("^plot_A", names(vars))]
plot_A_params <- plot_A_params[!sapply(plot_A_params, is.null)]
plot_A_annotations <- vars[grepl("^plot_A_annotation_[0-9]", names(vars))]
plot_A_annotations <- plot_A_annotations[!sapply(plot_A_annotations, is.null)]
plot.A.Notes.shared <- vars$plot_A_Notes_shared %||% ""  # Add default

# Get all Plot B parameters that are not NULL
plot_B_params <- vars[grepl("^plot_B", names(vars))]
plot_B_params <- plot_B_params[!sapply(plot_B_params, is.null)]
plot_B_annotations <- vars[grepl("^plot_B_annotation_[0-9]", names(vars))]
plot_B_annotations <- plot_B_annotations[!sapply(plot_B_annotations, is.null)]
plot.B.Notes.shared <- vars$plot_B_Notes_shared %||% ""  # Add default

# ADD: Helper function for null coalescing (if not already defined)
if (!exists("%||%")) {
  `%||%` <- function(x, y) if (is.null(x)) y else x
}
```


# Dynamic Report

See [site](`r vars$bookmark_url`)

## Scatter Plots with Regression Lines
### Plot A Visualizations

```{r}
print(plot_A_params)
```

```{r}
#| echo: false

my_title= "my_title"
my_subtitle = "my_subtitle"
final_caption = "final_caption"

tempfiles <- c()
for (i in 1:plot_A_params$plot_A_n){
plot_rep_num <- as.roman(1:10)[i]
letter <- LETTERS[i]

x_var <- (plot_A_params[grepl("^plot_A_x[0-9]", names(plot_A_params))])[[i]]  # Extract the actual value here

base_theme <- theme(
    plot.background = element_rect(fill = color_panel_bg, color = NA),
    plot.caption = element_text(
      size = 11,
      margin = margin(t = 2, b = 2, unit = 'pt')  
    ),
    panel.background = element_rect(fill = color_panel_bg, color = NA),
    text = element_text(color = color_fg),
    axis.text = element_text(color = color_fg),
    axis.title = element_text(color = color_fg),
    plot.title = element_text(face = 'bold', color = color_primary)
  )


theme_border <- theme_void() + 
theme(
  plot.title = element_text(
    size = 17,
    hjust = 0.5,
    face = 'bold',
    family = 'HelveticaNeue-Light' 
  ),
  plot.subtitle = element_text(
    size = 15,
    hjust = 0.5,
    family = 'HelveticaNeue-Light'
  ),
  plot.caption = element_text(
    size = 12,
    colour = '#C0C0C0',
    hjust = 0.9 #,margin = margin(t = 10, b = 55, unit = 'pt')  
  ),
  plot.tag = element_text(
    size = 17,        # FONT SIZE for tag_levels (A, B, C)
    face = 'bold',    # Make tags bold
    color = '#cc4c02' # Use your primary color
  )
)

fig.plot.A.ref <- plot_A_annotations[grep("plot_A_annotation_1", names(plot_A_annotations), value = TRUE)][i]
rmd_content <- glue::glue("
\```{r}
#| label: <<fig.plot.A.ref>>
#| fig-height: 6
#| fig-width: 7
#| echo: false

dat <- mtcars |> filter(gear == x_var)
p1 <- ggplot(dat, aes(x = mpg)) +
  geom_histogram(fill = color_primary, color = color_secondary, alpha = 0.7, bins = 15) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('Distribution of MPG (', i, ')'), 
    x = 'MPG', 
    y = 'Frequency',
    caption = 'Plot 1'
  ) +
  base_theme 

p2 <- ggplot(dat, aes(x = hp)) +
  geom_histogram(fill = color_secondary, color = color_primary, alpha = 0.7, bins = 15) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('Distribution of HP (', i, ')'), 
    x = 'HP', 
    y = 'Frequency',
    caption = 'Plot 2'
  ) +
  base_theme 

# Create GT table with custom CSS for width control
table_data <- dat %>%
  select(mpg, cyl, hp) %>%
  head(5) %>%
  round(2)

table_data <- cbind(Car = rownames(mtcars)[1:5], table_data) %>%
  as.data.frame()

gt_tab <- table_data %>%
  gt() %>%
  tab_header(title = paste0('Sample Data (', i, ')')) %>%
  tab_options(
    table.width = pct(55),           # smaller width
    table.layout = 'fixed',
    data_row.padding = px(4),        # less padding
    column_labels.padding = px(1),   # less padding
    table.border.left.width = px(0),
    table.border.right.width = px(0)
  ) %>%
  tab_style(
    style = list(
      cell_text(size = px(11), weight = 'normal'),  # smaller font
      cell_borders(sides = c('left', 'right'), color = 'transparent', weight = px(13))
    ),
    locations = cells_body()
  ) %>%
  tab_style(
    style = list(
      cell_text(size = px(14), weight = 'bold'),    # smaller font
      cell_borders(sides = c('left', 'right'), color = 'transparent', weight = px(13))
    ),
    locations = cells_column_labels()
  ) %>%
  tab_style(
    style = cell_text(size = px(14), weight = 'bold', color = '#cc4c02'),  # smaller font
    locations = cells_title()
  ) %>%
  cols_width(
    Car ~ px(80),      # narrower columns
    mpg ~ px(60),
    cyl ~ px(60),
    hp ~ px(60)
  )

table_with_caption <- wrap_table(gt_tab, panel = 'full', space = 'fixed') +
  labs(caption = 'Table 1') + 
  theme_minimal() +
  theme(
    plot.margin = unit(c(0.8, 0.8, 0.1, 0.1), 'cm'),
    plot.caption = element_text(
      size = 11,
      hjust = 1,
      family = 'HelveticaNeue-Light'
    ),
    text = element_text(family = 'HelveticaNeue-Light')
)  

# Combine with patchwork and use the final caption
(table_with_caption + p1) / p2 + 
  plot_annotation(
    title = my_title,
    subtitle = my_subtitle,
    caption = final_caption,  # Use the correctly constructed caption
    tag_levels = 'A',
    theme = theme_border
  ) +
  plot_layout(
    heights = c(0.4, 1),  # Table, p1, p2 (p2 gets most height)
      guides = 'collect'
  ) 

\```

<<plot.A.Notes.shared>>

See @<<fig.plot.A.ref>>. 
", .open = "<<", .close = ">>")

# Create a temporary file with .Rmd extension
temp_file <- tempfile(paste0("file_", i), fileext = ".qmd")
tempfiles <- c(tempfiles, temp_file)

# Write the content to the temporary file
writeLines(rmd_content, temp_file)
}
```


```{r, results='asis'}
#| echo: false

for (file in tempfiles) {
  cat(knitr::knit_child(file, quiet = TRUE), sep = '\n')
}
```


### Plot B Visualizations

```{r}
print(plot_B_params)
```

```{r}

my_title= "my_title"
my_subtitle = "my_subtitle"
final_caption = "final_caption"

tempfiles <- c()
for (i in 1:plot_B_params$plot_B_n){
plot_rep_num <- as.roman(1:10)[i]
letter <- LETTERS[i]

x_var <- (plot_B_params[grepl("^plot_B_x[0-9]", names(plot_B_params))])[[i]]  # Extract the actual value here


fig.plot.B.ref <- plot_B_annotations[grep("plot_B_annotation_1", names(plot_B_annotations), value = TRUE)][i]
rmd_content <- glue::glue("
\```{r}
#| label: <<fig.plot.B.ref>>
#| fig-height: 6
#| fig-width: 7
#| echo: false

dat <- mtcars |> filter(gear == x_var)
p1 <- ggplot(dat, aes(x = mpg)) +
    geom_histogram(fill = color_primary, color = color_secondary, alpha = 0.7, bins = 15) +
    base_theme +
    labs(
      title = paste0('ESR1 Expression Distribution (', i, ')'), 
      x = 'Expression Level', 
      y = 'Frequency',
      caption = 'Plot 1'  # ← CHANGE: Use annotation caption
    ) +
    theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))
  
# Plot 2 - Use plot2Cap from annotations  
p2 <- ggplot(dat, aes(x = hp)) +
  geom_histogram(fill = color_secondary, color = color_primary, alpha = 0.7, bins = 15) +
  base_theme +
  labs(
    title = paste0('ESR1 Mutation Frequency (', i, ')'), 
    x = 'Mutation Count', 
    y = 'Frequency',
    caption = 'Plot 2'   # ← CHANGE: Use annotation caption
  ) +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

p3 <- ggplot(dat, aes(x = disp)) +
  geom_histogram(fill = color_primary, color = color_secondary, alpha = 0.7, bins = 15) +
  base_theme +
  labs(
    title = paste0('ESR1 Response Correlation (', i, ')'), 
    x = 'Response Score', 
    y = 'Frequency',
    caption =  'Plot 3'  
  ) +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

p4 <- ggplot(dat, aes(x = wt)) +
  geom_histogram(fill = color_secondary, color = color_primary, alpha = 0.7, bins = 15) +
  base_theme +
  labs(
    title = paste0('ESR1 Diagnostic Accuracy (', i, ')'), 
    x = 'Accuracy Score', 
    y = 'Frequency',
    caption =  'Plot 4'  
  ) +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

p1 / (p2 + (p3 / p4)) + 
    plot_annotation(
      title = 'title',      # ← CHANGE: Use annotation title
      subtitle = 'subtitle'  , # ← CHANGE: Use annotation subtitle
      caption =   'caption',  # ← CHANGE: Use annotation overall caption
      tag_levels = 'A', 
      theme = theme_border
    ) +
    plot_layout(
      heights = c(0.4, 1),
      guides = 'collect'
    )
\```

<<plot.B.Notes.shared>>

See @<<fig.plot.B.ref>>. 
", .open = "<<", .close = ">>")

# Create a temporary file with .Rmd extension
temp_file <- tempfile(paste0("file_", i), fileext = ".qmd")
tempfiles <- c(tempfiles, temp_file)

# Write the content to the temporary file
writeLines(rmd_content, temp_file)
}
```


```{r, results='asis'}
#| echo: false

for (file in tempfiles) {
  cat(knitr::knit_child(file, quiet = TRUE), sep = '\n')
}
```
  