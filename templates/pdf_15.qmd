---
title: "`r params$title`"
subtitle: "`r params$subtitle`"
author:
  - name: "`r params$name`"
    affiliations:
      - name: Eli Lilly
  - name: Nicole Zhang
    affiliations:
      - name: Guardant Health
        department: Real World Evidence
    email: niczhang@guardanthealth.com
  - name: Thomas Schmitt
    affiliations:
      - name: Guardant Health
        department: Business Development
    email: tschmitt@guardanthealth.com
  - name: Daniel Hintz
    affiliations:
      - name: Guardant Health
        department: Real World Evidence
    email: dhintz@guardanthealth.com
date: "`r Sys.Date()`"
### Comment or remove the following line if NO summary should be shown on the title page
abstract: "Abstract goes here."
logo1: ../assets/images/company_logo3.png  # logo on left side of title page
logo2: ../assets/images/moto_light.png  # logo on right side of title page
### Uncomment the following line if the document language is German
# language: custom_lang.yml
### Comment or remove the following two lines if NO references are used
bibliography: [../references/references.bib, ../references/packages.bib] # Path to bibliography files 
csl: ../references/sage-harvard.csl                            # Path to reference style file
### Settings for rendering the document:
format: 
  pdf:
    documentclass: scrbook  
    classoption: ["onepage", "openany"]
    geometry:   
      - top=25mm     # margin settings
      - bottom=35mm
      - left=25mm
      - right=25mm
      - heightrounded
    template-partials:
      - "../assets/styles/before-body.tex"
      - "../assets/styles/_titlepage.tex" 
      - "../assets/styles/_coverpage.tex" 
    include-in-header:
    - "../assets/styles/in-header.tex"
    - text: |
        % Make entire TOC entries clickable, not just page numbers
        \hypersetup{
          linktocpage=false,
          linktoc=all
        }
    - text: |
        % Prevent blank pages before chapters
        \KOMAoptions{twoside=false}
        \raggedbottom
        \makeatletter
        \renewcommand*{\cleardoublepage}{\clearpage}
        \makeatother
    # Options for front cover
    cover-bg-image: "../assets/images/cover.png"
    cover-page-color: "FFFFFF"  # provide hex color code
    cover-text-color: "3A515C"  # provide hex color code
    cover-fade-effect: true
    # Options for table of content
    toc: true
    toc-depth: 3
    toc-title: Contents       # remove line or adjust if language is German
    number-sections: true
    number-depth: 3
    lof: false  # list of figures
    lot: false  # list of tables
    # CLICKABLE LINKS SETTINGS
    colorlinks: true
    linkcolor: blue          # Color for internal links (TOC, cross-references)
    urlcolor: blue           # Color for external URLs
    citecolor: blue          # Color for citation links
    toccolor: blue           # Color specifically for TOC links
    links-as-notes: false    # Prevents links from becoming footnotes
    link-citations: true     # Makes citations clickable
    # Additional hyperref options for better navigation
    hyperrefoptions:
      - bookmarks=true       # Creates PDF bookmarks (sidebar navigation)
      - bookmarksopen=true   # Opens bookmarks panel by default
      - bookmarksnumbered=true # Numbers bookmarks
      - pdfpagemode=UseOutlines # Opens PDF with bookmarks visible
      - pdftoolbar=true      # Shows PDF toolbar
      - pdfmenubar=true      # Shows PDF menu bar
      - pdffitwindow=false   # Don't fit window to page
      - pdfstartview=FitH    # Fit width on open
      - colorlinks=true      # Ensure colored links
      - linktocpage=false    # Make titles clickable, not just page numbers
    crossref: 
      chapters: false     # set to 'true' if figure numbering should follow subsections
      fig-prefix: Fig.    # (default is 'Figure'; adjust if language is German)
    # Code options:
    highlight-style: arrow # default 
execute:
  echo: false
  warning: false
  message: false
fig-align: center
editor: source
params:
  title: null
  subtitle: null
  name: null
---

<!--
pdf_15.qmd - Updated with swapped plots and breast cancer data
-->
```{r}
#| label: load-packages-and-vars
#| echo: false

# Load packages
library(knitr)
library(ggplot2)
library(yaml)
library(dplyr)
library(patchwork)
library(showtext)
library(gt)
library(survival)      # ADD: For survival analysis
library(survminer)     # ADD: For survival plots
library(tidyr)         # ADD: For data manipulation
library(stringr)       # ADD: For string operations
library(plotly)
library(png)
library(grid)

# Read plot vars from YAML file
# Data structure: params (metadata via execute_params) + vars 
if (file.exists("config/report_vars.yaml")) {
  yaml_data <- yaml::read_yaml("config/report_vars.yaml")
  vars <- yaml_data$vars  # Plot variables
  # Note: metadata (title, subtitle, name) comes via execute_params, not from YAML
} else {
  stop("report_vars.yaml was not created")
}

# Set up colors
color_bg <- "#F8F9FA"
color_panel_bg <- "#FFFFFF"
color_outer_bg <- "#ECECEC"
color_fg <- "#212529"
color_primary <- "#cc4c02"
color_secondary <- "#636363"

```

```{r}
#| label: breast-cancer-data
#| echo: false

# Create the breast cancer dataset (matching the Shiny app)
create_breast_cancer_data <- function(n = 500, seed = 123) {
  set.seed(seed)
  
  # Define cohorts
  cohorts <- c("HR+/HER2", "HR+/HER2_wESR1", "HR+/HER2_wco_PIK3CA_PTEN_AKT", "ESR1 alone")
  
  # Generate patient data
  data <- data.frame(
    patient_id = paste0("PT", sprintf("%04d", 1:n)),
    cohort = sample(cohorts, n, replace = TRUE, prob = c(0.3, 0.25, 0.25, 0.2)),
    stringsAsFactors = FALSE
  )
  
  # Add clinical characteristics based on cohort
  data <- data %>%
    mutate(
      # ESR1 expression levels (higher in ESR1+ cohorts)
      esr1_expression = case_when(
        cohort == "HR+/HER2" ~ rnorm(n(), mean = 2, sd = 0.5),
        cohort == "HR+/HER2_wESR1" ~ rnorm(n(), mean = 5, sd = 1),
        cohort == "HR+/HER2_wco_PIK3CA_PTEN_AKT" ~ rnorm(n(), mean = 4.5, sd = 0.8),
        cohort == "ESR1 alone" ~ rnorm(n(), mean = 6, sd = 1.2)
      ),
      
      # PIK3CA mutation frequency (higher in co-mutation cohort)
      pik3ca_mutation = case_when(
        cohort == "HR+/HER2" ~ rbinom(n(), 1, 0.15),
        cohort == "HR+/HER2_wESR1" ~ rbinom(n(), 1, 0.20),
        cohort == "HR+/HER2_wco_PIK3CA_PTEN_AKT" ~ rbinom(n(), 1, 0.85),
        cohort == "ESR1 alone" ~ rbinom(n(), 1, 0.10)
      ),
      
      # Treatment response score (0-100)
      treatment_response = case_when(
        cohort == "HR+/HER2" ~ rnorm(n(), mean = 70, sd = 15),
        cohort == "HR+/HER2_wESR1" ~ rnorm(n(), mean = 55, sd = 18),
        cohort == "HR+/HER2_wco_PIK3CA_PTEN_AKT" ~ rnorm(n(), mean = 45, sd = 20),
        cohort == "ESR1 alone" ~ rnorm(n(), mean = 50, sd = 17)
      ),
      
      # Time to treatment discontinuation (days)
      time_to_ttd = case_when(
        cohort == "HR+/HER2" ~ rexp(n(), rate = 1/180),
        cohort == "HR+/HER2_wESR1" ~ rexp(n(), rate = 1/120),
        cohort == "HR+/HER2_wco_PIK3CA_PTEN_AKT" ~ rexp(n(), rate = 1/90),
        cohort == "ESR1 alone" ~ rexp(n(), rate = 1/100)
      ),
      
      # Time to next treatment (days)
      time_to_ttnt = time_to_ttd + rexp(n, rate = 1/30),
      
      # Treatment line (1-5)
      treatment_line = sample(1:5, n, replace = TRUE, prob = c(0.35, 0.30, 0.20, 0.10, 0.05)),
      
      # Therapy type
      therapy_type = sample(c("Endocrine", "Chemotherapy", "Targeted Agent", "Immunotherapy"), 
                           n, replace = TRUE, prob = c(0.40, 0.30, 0.25, 0.05)),
      
      # ESR1 mutation count
      esr1_mutations = case_when(
        cohort == "HR+/HER2" ~ rpois(n(), lambda = 0.5),
        cohort == "HR+/HER2_wESR1" ~ rpois(n(), lambda = 2.5),
        cohort == "HR+/HER2_wco_PIK3CA_PTEN_AKT" ~ rpois(n(), lambda = 2.0),
        cohort == "ESR1 alone" ~ rpois(n(), lambda = 3.0)
      ),
      
      # Diagnostic accuracy score
      diagnostic_accuracy = rnorm(n, mean = 85, sd = 10),
      
      # Age at diagnosis
      age = rnorm(n, mean = 60, sd = 12),
      
      # Stage
      stage = sample(c("Early", "Advanced"), n, replace = TRUE, prob = c(0.4, 0.6)),
      
      # Previous therapies count
      previous_therapies = rpois(n, lambda = 2),
      
      # Biomarker positivity rate
      biomarker_positivity = runif(n, min = 0, max = 1),
      
      # Days from ESR1 diagnosis to treatment
      days_to_tx = rexp(n, rate = 1/21)
    )
  
  # Ensure positive values
  data <- data %>%
    mutate(
      esr1_expression = pmax(esr1_expression, 0),
      treatment_response = pmax(pmin(treatment_response, 100), 0),
      time_to_ttd = pmax(time_to_ttd, 1),
      time_to_ttnt = pmax(time_to_ttnt, time_to_ttd + 1),
      diagnostic_accuracy = pmax(pmin(diagnostic_accuracy, 100), 0),
      age = pmax(age, 18),
      days_to_tx = pmax(days_to_tx, 0)
    )
  
  return(data)
}

# Create the global dataset
bc_data <- create_breast_cancer_data(n = 500, seed = 123)
```

```{r}
#| label: survival-data-function
#| echo: false

# Function to create survival data (matching the Shiny app)
create_survival_data <- function(n = 100, seed = 123, cohort_filter = NULL) {
  set.seed(seed)
  
  # If cohort_filter is provided, create cohort-specific survival data
  if (!is.null(cohort_filter)) {
    # Create survival data that varies by cohort
    treatment <- sample(c("Endocrine + CDK4/6", "Chemotherapy"), n, replace = TRUE)
    
    # Base rates that vary by cohort
    base_rates <- switch(cohort_filter,
      "HR+/HER2" = list(treatment1 = 0.04, treatment2 = 0.07),
      "HR+/HER2_wESR1" = list(treatment1 = 0.05, treatment2 = 0.09),
      "HR+/HER2_wco_PIK3CA_PTEN_AKT" = list(treatment1 = 0.06, treatment2 = 0.10),
      "ESR1 alone" = list(treatment1 = 0.055, treatment2 = 0.085),
      # Default
      list(treatment1 = 0.05, treatment2 = 0.08)
    )
    
    # Generate survival times with cohort-specific hazards
    time <- ifelse(treatment == "Endocrine + CDK4/6", 
                   rexp(n, rate = base_rates$treatment1), 
                   rexp(n, rate = base_rates$treatment2))
    
    # ESR1 status probability varies by cohort
    esr1_prob <- switch(cohort_filter,
      "HR+/HER2" = 0.2,
      "HR+/HER2_wESR1" = 0.8,
      "HR+/HER2_wco_PIK3CA_PTEN_AKT" = 0.7,
      "ESR1 alone" = 0.95,
      0.5  # Default
    )
    
    esr1_status <- sample(c("ESR1+", "ESR1-"), n, replace = TRUE, 
                         prob = c(esr1_prob, 1 - esr1_prob))
    
  } else {
    # Original logic for when no cohort filter is provided
    treatment <- sample(c("Endocrine + CDK4/6", "Chemotherapy"), n, replace = TRUE)
    
    time <- ifelse(treatment == "Endocrine + CDK4/6", 
                   rexp(n, rate = 0.05), 
                   rexp(n, rate = 0.08))
    
    esr1_status <- sample(c("ESR1+", "ESR1-"), n, replace = TRUE, prob = c(0.4, 0.6))
  }
  
  # Generate censoring (some patients don't experience event)
  censoring_prob <- 0.3
  event <- rbinom(n, 1, 1 - censoring_prob)
  
  # For censored observations, truncate time at random point
  time <- ifelse(event == 0, 
                 pmin(time, runif(n, 5, 30)), 
                 time)
  
  data.frame(
    time = time,
    event = event,
    treatment = treatment,
    age = rnorm(n, 60, 10),
    stage = sample(c("Early", "Advanced"), n, replace = TRUE, prob = c(0.4, 0.6)),
    esr1_status = esr1_status,
    cohort = if(!is.null(cohort_filter)) cohort_filter else "All"
  )
}
```

```{r}
#| label: Loading-fonts

# Register your custom fonts
font_add("HelveticaNeue-Light", "assets/fonts/Helvetica_Neue_Fonts/HelveticaNeueLTStd-Lt.otf")
font_add("HelveticaNeue-Regular", "assets/fonts/Helvetica_Neue_Fonts/HelveticaNeueLTStd-Roman.otf") 
font_add("HelveticaNeue-Italic", "assets/fonts/Helvetica_Neue_Fonts/HelveticaNeueLTStd-It.otf")
font_add("HelveticaNeue-Medium", "assets/fonts/Helvetica_Neue_Fonts/HelveticaNeueLTStd-Md.otf")
font_add("HelveticaNeue-Bold", "assets/fonts/Helvetica_Neue_Fonts/HelveticaNeueLTStd-Bd.otf")

# Enable showtext for rendering
showtext_auto()
```
```{r}
#| label: options-config

options(digits = 4)

#print(vars)
```

```{r}
#| label: load-and-preproc-vars

# Get all Plot A parameters that are not NULL
plot_A_params <- vars[grepl("^plot_A", names(vars))]
plot_A_params <- plot_A_params[!sapply(plot_A_params, is.null)]
plot_A_annotations <- vars[grepl("^plot_A_annotation_[0-9]", names(vars))]
plot_A_annotations <- plot_A_annotations[!sapply(plot_A_annotations, is.null)]
plot.A.Notes.shared <- vars$plot_A_Notes_shared %||% ""  # Add default

# Get all Plot B parameters that are not NULL
plot_B_params <- vars[grepl("^plot_B", names(vars))]
plot_B_params <- plot_B_params[!sapply(plot_B_params, is.null)]
plot_B_annotations <- vars[grepl("^plot_B_annotation_[0-9]", names(vars))]
plot_B_annotations <- plot_B_annotations[!sapply(plot_B_annotations, is.null)]
plot.B.Notes.shared <- vars$plot_B_Notes_shared %||% ""  # Add default

# ADD: Get all Plot C parameters that are not NULL
plot_C_params <- vars[grepl("^plot_C", names(vars))]
plot_C_params <- plot_C_params[!sapply(plot_C_params, is.null)]
plot_C_annotations <- vars[grepl("^plot_C_annotation_[0-9]", names(vars))]
plot_C_annotations <- plot_C_annotations[!sapply(plot_C_annotations, is.null)]
plot.C.Notes.shared <- vars$plot_C_Notes_shared %||% ""  # Add default

# ADD: Get all Plot D parameters that are not NULL
plot_D_params <- vars[grepl("^plot_D", names(vars))]
plot_D_params <- plot_D_params[!sapply(plot_D_params, is.null)]
plot_D_annotations <- vars[grepl("^plot_D_annotation_[0-9]", names(vars))]
plot_D_annotations <- plot_D_annotations[!sapply(plot_D_annotations, is.null)]
plot.D.Notes.shared <- vars$plot_D_Notes_shared %||% ""  # Add default

# ADD: Helper function for null coalescing (if not already defined)
if (!exists("%||%")) {
  `%||%` <- function(x, y) if (is.null(x)) y else x
}
```


# Dynamic Report

See [site](`r vars$bookmark_url`)

## Scatter Plots with Regression Lines
### Plot A Visualizations (ESR1 Dx Landscape)

```{r}
print(plot_A_params)
```

```{r}
#| echo: false

tempfiles <- c()
for (i in 1:plot_A_params$plot_A_n){
plot_rep_num <- as.roman(1:10)[i]
letter <- LETTERS[i]
my_title = plot_A_annotations[[paste0("plot_A_annotation_", i, "_2")]]
my_subtitle = plot_A_annotations[[paste0("plot_A_annotation_", i, "_3")]]
my_pnl1_cap = plot_A_annotations[[paste0("plot_A_annotation_", i, "_4")]]
my_pnl2_cap = plot_A_annotations[[paste0("plot_A_annotation_", i, "_5")]]
my_pnl3_cap = plot_A_annotations[[paste0("plot_A_annotation_", i, "_6")]]
my_pnl4_cap = plot_A_annotations[[paste0("plot_A_annotation_", i, "_7")]]
final_caption = plot_A_annotations[[paste0("plot_A_annotation_", i, "_8")]]

x_var <- (plot_A_params[grepl("^plot_A_x[0-9]", names(plot_A_params))])[[i]]  # Extract cohort filter

base_theme <- theme(
    plot.background = element_rect(fill = color_panel_bg, color = NA),
    plot.caption = element_text(
      size = 11,
      margin = margin(t = 2, b = 2, unit = 'pt')  
    ),
    panel.background = element_rect(fill = color_panel_bg, color = NA),
    text = element_text(color = color_fg),
    axis.text = element_text(color = color_fg),
    axis.title = element_text(color = color_fg),
    plot.title = element_text(face = 'bold', color = color_primary)
  )


theme_border <- theme_void() + 
theme(
  plot.title = element_text(
    size = 17,
    hjust = 0.5,
    face = 'bold',
    family = 'HelveticaNeue-Light' 
  ),
  plot.subtitle = element_text(
    size = 15,
    hjust = 0.5,
    family = 'HelveticaNeue-Light'
  ),
  plot.caption = element_text(
    size = 12,
    colour = '#C0C0C0',
    hjust = 0.9
  ),
  plot.tag = element_text(
    size = 17,
    face = 'bold',
    color = '#cc4c02'
  )
)

# Get reference label
ref_param_name <- paste0("plot_A_annotation_", i, "_1")
fig.plot.A.ref <- plot_A_annotations[[ref_param_name]]

if (is.null(fig.plot.A.ref) || fig.plot.A.ref == "") {
  fig.plot.A.ref <- paste0("fig-A-", i)
}

fig.plot.A.ref <- gsub("^@", "", fig.plot.A.ref)
rmd_content <- glue::glue("
\```{r}
#| label: <<fig.plot.A.ref>>
#| fig-height: 6
#| fig-width: 7
#| echo: false

# Filter data by selected cohort
dat <- bc_data |> filter(cohort == x_var)

# Plot 1 - ESR1 Expression Distribution
p1 <- ggplot(dat, aes(x = esr1_expression)) +
  geom_histogram(fill = color_primary, color = color_secondary, alpha = 0.7, bins = 20) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('ESR1 Expression Distribution (', i, ')'), 
    x = 'ESR1 Expression Level', 
    y = 'Frequency',
    caption = '<<my_pnl1_cap>>'
  ) +
  base_theme +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

# Plot 2 - ESR1 Mutation Count
p2 <- ggplot(dat, aes(x = factor(esr1_mutations))) +
  geom_bar(fill = color_secondary, color = color_primary, alpha = 0.7) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('ESR1 Mutation Count (', i, ')'), 
    x = 'Number of ESR1 Mutations', 
    y = 'Number of Patients',
    caption = '<<my_pnl2_cap>>'
  ) +
  base_theme +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

# Plot 3 - Treatment Response by Line
p3 <- ggplot(dat, aes(x = factor(treatment_line), y = treatment_response)) +
  geom_boxplot(fill = color_primary, alpha = 0.5) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('Treatment Response by Line (', i, ')'), 
    x = 'Treatment Line', 
    y = 'Response Score',
    caption = '<<my_pnl3_cap>>'
  ) +
  base_theme +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

# Plot 4 - Biomarker Positivity Rate
p4 <- ggplot(dat, aes(x = biomarker_positivity)) +
  geom_histogram(fill = color_secondary, color = color_primary, alpha = 0.7, bins = 15) +
  scale_x_continuous(labels = scales::percent_format()) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('Biomarker Positivity Rate (', i, ')'), 
    x = 'Positivity Rate', 
    y = 'Frequency',
    caption = '<<my_pnl4_cap>>'
  ) +
  base_theme +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = 'pt'))

# Combine with patchwork
p1 / (p2 + (p3 / p4)) + 
  plot_annotation(
    title = '<<my_title>>',
    subtitle = '<<my_subtitle>>',
    caption = '<<final_caption>>',
    tag_levels = '1',
    tag_suffix = ')',
    theme = theme_border
  ) +
  plot_layout(
    heights = c(0.4, 1),
    guides = 'collect'
  )

\```

<<plot.A.Notes.shared>>

See @<<fig.plot.A.ref>>. 
", .open = "<<", .close = ">>")

# Create a temporary file
temp_file <- tempfile(paste0("file_", i), fileext = ".qmd")
tempfiles <- c(tempfiles, temp_file)

# Write the content to the temporary file
writeLines(rmd_content, temp_file)
}
```


```{r, results='asis'}
#| echo: false

for (file in tempfiles) {
  cat(knitr::knit_child(file, quiet = TRUE), sep = '\n')
}
```


### Plot B Visualizations (Treatment Selection)

```{r}
print(plot_B_params)
```

```{r}
#| echo: false

tempfiles <- c()
for (i in 1:plot_B_params$plot_B_n){
plot_rep_num <- as.roman(1:10)[i]
letter <- LETTERS[i]
my_title = plot_B_annotations[[paste0("plot_B_annotation_", i, "_2")]]
my_subtitle = plot_B_annotations[[paste0("plot_B_annotation_", i, "_3")]]
my_tbl1_cap = plot_B_annotations[[paste0("plot_B_annotation_", i, "_4")]]
my_pnl1_cap = plot_B_annotations[[paste0("plot_B_annotation_", i, "_5")]]
my_pnl2_cap = plot_B_annotations[[paste0("plot_B_annotation_", i, "_6")]]
final_caption = plot_B_annotations[[paste0("plot_B_annotation_", i, "_7")]]

x_var <- (plot_B_params[grepl("^plot_B_x[0-9]", names(plot_B_params))])[[i]]  # Extract cohort filter

# Get reference label
ref_param_name <- paste0("plot_B_annotation_", i, "_1")
fig.plot.B.ref <- plot_B_annotations[[ref_param_name]]

if (is.null(fig.plot.B.ref) || fig.plot.B.ref == "") {
  fig.plot.B.ref <- paste0("fig-B-", i)
}

fig.plot.B.ref <- gsub("^@", "", fig.plot.B.ref)
rmd_content <- glue::glue("
\```{r}
#| label: <<fig.plot.B.ref>>
#| fig-height: 6
#| fig-width: 7
#| echo: false

# Filter data by selected cohort
dat <- bc_data |> filter(cohort == x_var)

# Create summary table with time to treatment categories
bins <- c(-Inf, 7, 14, 21, 28, 35, 42, Inf)
labels <- c('≤7 days', '8-14 days', '15-21 days', '22-28 days', 
            '29-35 days', '36-42 days', '≥43 days')

table_data <- dat %>%
  mutate(period = cut(days_to_tx, breaks = bins, labels = labels, right = TRUE)) %>%
  group_by(period) %>%
  summarise(
    n = n(),
    pct_in_period = round(100 * n() / nrow(dat), 1),
    .groups = 'drop'
  ) %>%
  arrange(factor(period, levels = labels)) %>%
  mutate(cumulative_pct = round(cumsum(pct_in_period), 1))

# Create GT table
gt_tab <- table_data %>%
  gt() %>%
  tab_header(title = paste0('Time to Treatment Post-ESR1 Dx (B.', i, ')')) %>%
  cols_label(
    period = 'Time Period',
    n = 'Patients',
    pct_in_period = '% in Period',
    cumulative_pct = 'Cumulative %'
  ) %>%
  tab_options(
    table.width = pct(100),
    table.layout = 'fixed',
    data_row.padding = px(8),
    column_labels.padding = px(8),
    table.border.left.width = px(0),
    table.border.right.width = px(0)
  ) %>%
  tab_style(
    style = list(
      cell_text(size = px(13), weight = 'normal'),
      cell_borders(sides = c('left', 'right'), color = 'transparent', weight = px(15))
    ),
    locations = cells_body()
  ) %>%
  tab_style(
    style = list(
      cell_text(size = px(14), weight = 'bold'),
      cell_borders(sides = c('left', 'right'), color = 'transparent', weight = px(15))
    ),
    locations = cells_column_labels()
  ) %>%
  tab_style(
    style = cell_text(size = px(16), weight = 'bold', color = '#cc4c02'),
    locations = cells_title()
  ) %>%
  cols_width(
    period ~ px(130),
    n ~ px(90),
    pct_in_period ~ px(110),
    cumulative_pct ~ px(110)
  )

# Wrap table
p1 <- wrap_table(gt_tab, panel = 'full', space = 'fixed') +
  labs(caption = '<<my_tbl1_cap>>') + 
  theme_minimal() +
  theme(
    plot.margin = unit(c(0.8, 0.8, 0.1, 0.1), 'cm'),
    plot.caption = element_text(
      size = 11,
      hjust = 1,
      family = 'HelveticaNeue-Light'
    ),
    text = element_text(family = 'HelveticaNeue-Light')
  )

# Panel 2: Time to Treatment Initiation
p2 <- ggplot(dat, aes(x = days_to_tx)) +
  geom_histogram(fill = color_primary, color = color_secondary, alpha = 0.7, bins = 15) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('Days to Treatment Post-ESR1 Dx (', i, ')'), 
    x = 'Days from ESR1 Diagnosis', 
    y = 'Number of Patients',
    caption = '<<my_pnl1_cap>>'
  ) +
  base_theme +
  theme(plot.margin = unit(c(0.8, 0.1, 0.1, 1), 'cm'))

# Panel 3: Treatment Duration by Line
avg_duration <- dat %>%
  group_by(treatment_line, therapy_type) %>%
  summarise(avg_months = mean(time_to_ttd / 30.44, na.rm = TRUE), .groups = 'drop')

p3 <- ggplot(avg_duration, aes(x = factor(treatment_line), y = avg_months, fill = therapy_type)) +
  geom_col(position = 'dodge', color = 'gray20', alpha = 0.8) +
  scale_fill_manual(values = c(
    'Chemotherapy' = '#BFD7EA',
    'Endocrine' = '#9CBFD9',
    'Targeted Agent' = '#7FA6C9',
    'Immunotherapy' = '#5E8FBF'
  )) +
  theme_minimal(base_family = 'HelveticaNeue-Light') +
  labs(
    title = paste0('Average Treatment Duration by Line (', i, ')'), 
    x = 'Treatment Line', 
    y = 'Average Duration (Months)',
    fill = 'Therapy Type',
    caption = '<<my_pnl2_cap>>'
  ) +
  base_theme +
  theme(plot.margin = unit(c(2.2, 0.1, 0.05, 0.1), 'cm'))

# Combine with patchwork
(p1 + p2) / p3 + 
  plot_annotation(
    title = '<<my_title>>',
    subtitle = '<<my_subtitle>>',
    caption = '<<final_caption>>',
    tag_levels = '1',
    tag_suffix = ')',
    theme = theme_border
  ) +
  plot_layout(
    heights = c(0.4, 1),
    guides = 'collect'
  )

\```

<<plot.B.Notes.shared>>

See @<<fig.plot.B.ref>>. 
", .open = "<<", .close = ">>")

# Create a temporary file
temp_file <- tempfile(paste0("file_", i), fileext = ".qmd")
tempfiles <- c(tempfiles, temp_file)

# Write the content to the temporary file
writeLines(rmd_content, temp_file)
}
```


```{r, results='asis'}
#| echo: false

for (file in tempfiles) {
  cat(knitr::knit_child(file, quiet = TRUE), sep = '\n')
}
```

### Plot C Visualizations

```{r}
print(plot_C_params)
```


```{r}
#| echo: false

tempfiles <- c()
for (i in 1:plot_C_params$plot_C_n){
plot_rep_num <- as.roman(1:10)[i]
letter <- LETTERS[i]
my_title = plot_C_annotations[[paste0("plot_C_annotation_", i, "_2")]]
my_subtitle = plot_C_annotations[[paste0("plot_C_annotation_", i, "_3")]]
my_pnl1_cap = plot_C_annotations[[paste0("plot_C_annotation_", i, "_4")]]
my_pnl2_cap = plot_C_annotations[[paste0("plot_C_annotation_", i, "_5")]]
final_caption = plot_C_annotations[[paste0("plot_C_annotation_", i, "_6")]]

x_var <- (plot_C_params[grepl("^plot_C_x[0-9]", names(plot_C_params))])[[i]]  # Extract cohort filter

base_theme <- theme_minimal(base_family = "HelveticaNeue-Light") +
  theme(
    plot.background = element_rect(fill = color_panel_bg, color = NA),
    plot.caption = element_text(size = 11, margin = margin(t = 2, b = 2, unit = "pt")),
    panel.background = element_rect(fill = color_panel_bg, color = NA),
    text = element_text(color = color_fg),
    axis.text = element_text(color = color_fg),
    axis.title = element_text(color = color_fg),
    plot.title = element_text(face = "bold", color = color_primary)
  )

theme_border <- theme_void() + 
  theme(
    plot.title = element_text(size = 17, hjust = 0.5, face = "bold", family = "HelveticaNeue-Light"),
    plot.subtitle = element_text(size = 15, hjust = 0.5, family = "HelveticaNeue-Light"),
    plot.caption = element_text(size = 12, colour = "#C0C0C0", hjust = 0.9),
    plot.tag = element_text(size = 17, face = "bold", color = "#cc4c02")
  )

# Get reference label
ref_param_name <- paste0("plot_C_annotation_", i, "_1")
fig.plot.C.ref <- plot_C_annotations[[ref_param_name]]

if (is.null(fig.plot.C.ref) || fig.plot.C.ref == "") {
  fig.plot.C.ref <- paste0("fig-C-", i)
}

fig.plot.C.ref <- gsub("^@", "", fig.plot.C.ref)
rmd_content <- glue::glue("
\```{r}
#| label: <<fig.plot.C.ref>>
#| fig-height: 6
#| fig-width: 7
#| echo: false

# Create survival data with cohort filter (different seed for each plot)
surv_data <- create_survival_data(n = 150, seed = 123 + i, cohort_filter = x_var)

# Add cohort info to title if available
cohort_label <- if(!is.null(unique(surv_data$cohort)) && unique(surv_data$cohort) != 'All') {
  paste0(' - ', unique(surv_data$cohort))
} else {
  ''
}

# Create survival objects
surv_obj_treatment <- survfit(Surv(time, event) ~ treatment, data = surv_data)
surv_obj_esr1 <- survfit(Surv(time, event) ~ esr1_status, data = surv_data)

# Plot 1 - Survival by Treatment
p1_survplot <- ggsurvplot(
  surv_obj_treatment,
  data = surv_data,
  conf.int = TRUE,
  pval = TRUE,
  risk.table = FALSE,
  palette = c(color_primary, color_secondary),
  ggtheme = base_theme,
  title = paste0('PFS by Treatment Type (', i, ')', cohort_label),
  xlab = 'Time (months)',
  ylab = 'Progression-Free Survival',
  legend.title = 'Treatment',
  legend.labs = c('Chemotherapy', 'Endocrine + CDK4/6')
)

# Extract the ggplot object and add caption
p1 <- p1_survplot$plot +
  labs(caption = '<<my_pnl1_cap>>') +
  theme(
    plot.margin = unit(c(0.8, 0.1, 0.1, 1), 'cm'),
    plot.caption = element_text(size = 11, margin = margin(t = 2, b = 2, unit = 'pt'))
  )

# Plot 2 - Survival by ESR1 Status
p2_survplot <- ggsurvplot(
  surv_obj_esr1,
  data = surv_data,
  conf.int = TRUE,
  pval = TRUE,
  risk.table = FALSE,
  palette = c('#2E8B57', '#CD853F'),
  ggtheme = base_theme,
  title = paste0('PFS by ESR1 Status (', i, ')', cohort_label),
  xlab = 'Time (months)',
  ylab = 'Progression-Free Survival',
  legend.title = 'ESR1 Status',
  legend.labs = c('ESR1-', 'ESR1+')
)

# Extract the ggplot object and add caption
p2 <- p2_survplot$plot +
  labs(caption = '<<my_pnl2_cap>>') +
  theme(
    plot.margin = unit(c(2.2, 0.1, 0.05, 0.1), 'cm'),
    plot.caption = element_text(size = 11, margin = margin(t = 2, b = 2, unit = 'pt'))
  )

# Combine with patchwork
p1 / p2 + 
  plot_annotation(
    title = '<<my_title>>',
    subtitle = '<<my_subtitle>>',
    caption = '<<final_caption>>',
    tag_levels = '1',
    tag_suffix = ')',
    theme = theme_border
  ) +
  plot_layout(
    heights = c(1, 1),
    guides = 'collect'
  )

\```

<<plot.C.Notes.shared>>

See @<<fig.plot.C.ref>>. 
", .open = "<<", .close = ">>")

# Create a temporary file
temp_file <- tempfile(paste0("file_", i), fileext = ".qmd")
tempfiles <- c(tempfiles, temp_file)

# Write the content to the temporary file
writeLines(rmd_content, temp_file)
}
```


```{r, results='asis'}
#| echo: false

for (file in tempfiles) {
  cat(knitr::knit_child(file, quiet = TRUE), sep = '\n')
}
```


### Plot D Visualizations

```{r}
#| label: sankey-data-function
#| echo: false

# Add the Sankey data creation function (matching the Shiny app)
create_sankey_data <- function(cohort_filter = NULL) {
  # Define nodes for the treatment pathway
  nodes <- data.frame(
    name = c(
      # 0: Initial diagnosis
      "ESR1+ Diagnosis",
      # 1-3: First-line treatments
      "Endocrine + CDK4/6", "Chemotherapy", "Targeted Therapy",
      # 4-6: First outcomes
      "Complete Response", "Partial Response", "Progressive Disease",
      # 7-9: Second-line treatments
      "Elacestrant", "Clinical Trial", "Palliative Care",
      # 10-12: Final outcomes
      "Stable Disease", "Disease Progression", "Long-term Response"
    ),
    stringsAsFactors = FALSE
  )
  
  # Define cohort-specific flow values
  if (!is.null(cohort_filter)) {
    link_values <- switch(cohort_filter,
      "HR+/HER2" = list(
        first_line = c(50, 25, 25),          # To first-line treatments
        endo_outcomes = c(25, 20, 5),        # Endocrine outcomes
        chemo_outcomes = c(8, 12, 5),        # Chemo outcomes
        targeted_outcomes = c(18, 5, 2),     # Targeted outcomes
        second_line_pd = c(4, 3, 5),         # PD to second-line
        second_line_pr = c(2, 1, 2),         # PR to second-line
        elacestrant_final = c(2, 1, 1),     # Elacestrant final
        trial_final = c(1, 1, 1),            # Trial final
        palliative_final = c(3, 2, 2)       # Palliative final
      ),
      
      "HR+/HER2_wESR1" = list(
        first_line = c(40, 35, 25),
        endo_outcomes = c(15, 20, 5),
        chemo_outcomes = c(12, 18, 5),
        targeted_outcomes = c(12, 10, 3),
        second_line_pd = c(5, 4, 6),
        second_line_pr = c(3, 2, 3),
        elacestrant_final = c(3, 2, 2),
        trial_final = c(2, 1, 1),
        palliative_final = c(4, 3, 3)
      ),
      
      "HR+/HER2_wco_PIK3CA_PTEN_AKT" = list(
        first_line = c(35, 40, 25),
        endo_outcomes = c(10, 20, 5),
        chemo_outcomes = c(15, 20, 5),
        targeted_outcomes = c(10, 12, 3),
        second_line_pd = c(6, 5, 7),
        second_line_pr = c(4, 3, 3),
        elacestrant_final = c(4, 3, 3),
        trial_final = c(3, 2, 2),
        palliative_final = c(5, 4, 4)
      ),
      
      "ESR1 alone" = list(
        first_line = c(45, 30, 25),
        endo_outcomes = c(20, 20, 5),
        chemo_outcomes = c(10, 15, 5),
        targeted_outcomes = c(15, 8, 2),
        second_line_pd = c(4, 3, 4),
        second_line_pr = c(2, 2, 2),
        elacestrant_final = c(2, 1, 1),
        trial_final = c(1, 1, 1),
        palliative_final = c(2, 2, 2)
      ),
      
      # Default values
      list(
        first_line = c(45, 30, 25),
        endo_outcomes = c(20, 20, 5),
        chemo_outcomes = c(10, 15, 5),
        targeted_outcomes = c(15, 8, 2),
        second_line_pd = c(4, 3, 4),
        second_line_pr = c(2, 2, 2),
        elacestrant_final = c(2, 1, 1),
        trial_final = c(1, 1, 1),
        palliative_final = c(2, 2, 2)
      )
    )
  } else {
    # Default values when no cohort specified
    link_values <- list(
      first_line = c(45, 30, 25),
      endo_outcomes = c(20, 20, 5),
      chemo_outcomes = c(10, 15, 5),
      targeted_outcomes = c(15, 8, 2),
      second_line_pd = c(4, 3, 4),
      second_line_pr = c(2, 2, 2),
      elacestrant_final = c(2, 1, 1),
      trial_final = c(1, 1, 1),
      palliative_final = c(2, 2, 2)
    )
  }
  
  # Build links from the cohort-specific values
  links <- data.frame(
    source = c(
      # From diagnosis to first-line treatments
      0, 0, 0,
      # From Endocrine to outcomes
      1, 1, 1,
      # From Chemo to outcomes
      2, 2, 2,
      # From Targeted to outcomes
      3, 3, 3,
      # From Progressive Disease to second-line
      6, 6, 6,
      # From Partial Response to second-line
      5, 5, 5,
      # From Elacestrant to final outcomes
      7, 7, 7,
      # From Clinical Trial to final outcomes
      8, 8, 8,
      # From Palliative Care to final outcomes
      9, 9, 9
    ),
    target = c(
      # To first-line treatments
      1, 2, 3,
      # To first outcomes
      4, 5, 6,
      4, 5, 6,
      4, 5, 6,
      # To second-line treatments
      7, 8, 9,
      7, 8, 9,
      # To final outcomes
      10, 11, 12,
      10, 11, 12,
      10, 11, 12
    ),
    value = c(
      link_values$first_line,
      link_values$endo_outcomes,
      link_values$chemo_outcomes,
      link_values$targeted_outcomes,
      link_values$second_line_pd,
      link_values$second_line_pr,
      link_values$elacestrant_final,
      link_values$trial_final,
      link_values$palliative_final
    ),
    stringsAsFactors = FALSE
  )
  
  # Add labels to links
  links$label <- paste0(links$value, " patients")
  
  # Define colors for nodes
  node_colors <- c(
    "#8B0000",     # Diagnosis - Dark red
    "#4682B4",     # Endocrine - Steel blue
    "#FF6347",     # Chemo - Tomato
    "#32CD32",     # Targeted - Lime green
    "#228B22",     # Complete Response - Forest green
    "#FFA500",     # Partial Response - Orange
    "#DC143C",     # Progressive Disease - Crimson
    "#9370DB",     # Elacestrant - Medium purple
    "#20B2AA",     # Clinical Trial - Light sea green
    "#708090",     # Palliative - Slate gray
    "#3CB371",     # Stable Disease - Medium sea green
    "#FF4500",     # Disease Progression - Orange red
    "#00CED1"      # Long-term Response - Dark turquoise
  )
  
  return(list(
    nodes = nodes,
    links = links,
    node_colors = node_colors,
    cohort = cohort_filter
  ))
}
```

```{r}
print(plot_D_params)
```

```{r}
#| echo: false


tempfiles <- c()
for (i in 1:plot_D_params$plot_D_n){
plot_rep_num <- as.roman(1:10)[i]
letter <- LETTERS[i]
my_title = plot_D_annotations[[paste0("plot_D_annotation_", i, "_2")]]
my_subtitle = plot_D_annotations[[paste0("plot_D_annotation_", i, "_3")]]
final_caption = plot_D_annotations[[paste0("plot_D_annotation_", i, "_4")]]

x_var <- (plot_D_params[grepl("^plot_D_x[0-9]", names(plot_D_params))])[[i]]

# Get reference label
ref_param_name <- paste0("plot_D_annotation_", i, "_1")
fig.plot.D.ref <- plot_D_annotations[[ref_param_name]]

if (is.null(fig.plot.D.ref) || fig.plot.D.ref == "") {
  fig.plot.D.ref <- paste0("fig-D-", i)
}

fig.plot.D.ref <- gsub("^@", "", fig.plot.D.ref)
rmd_content <- glue::glue("
\```{r}
#| label: <<fig.plot.D.ref>>
#| fig-height: 6
#| fig-width: 7
#| echo: false

# Create Sankey data with cohort filter
sankey_data <- create_sankey_data(cohort_filter = x_var)

# Add cohort info to title if available
cohort_label <- if(!is.null(sankey_data$cohort)) {
  paste0(' - ', sankey_data$cohort)
} else {
  ''
}

# Create the Sankey plot using plotly
p <- plot_ly(
  type = 'sankey',
  orientation = 'h',
  valueformat = '.0f',
  valuesuffix = ' patients',
  
  node = list(
    label = sankey_data$nodes$name,
    color = sankey_data$node_colors,
    pad = 15,
    thickness = 20,
    line = list(
      color = 'black',
      width = 0.5
    )
  ),
  
  link = list(
    source = sankey_data$links$source,
    target = sankey_data$links$target,
    value = sankey_data$links$value,
    label = sankey_data$links$label,
    color = 'rgba(0,0,0,0.2)'  # Semi-transparent links
  )
)

# Apply layout with consistent styling
p <- p %>% layout(
  title = list(
    text = paste0('<b>', '<<my_title>>', '</b><br>',
                  '<span style=\"font-size:14px\">', '<<my_subtitle>>', '</span><br>',
                  '<span style=\"font-size:16px\">ESR1+ Treatment Pathway (', i, ')', cohort_label, '</span>'),
    font = list(size = 18, color = color_primary),
    x = 0.5,
    xanchor = 'center'
  ),
  font = list(
    size = 12,
    color = color_fg,
    family = 'Helvetica Neue'
  ),
  xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
  yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
  plot_bgcolor = color_panel_bg,
  paper_bgcolor = color_panel_bg,
  margin = list(l = 20, r = 20, t = 100, b = 80),
  annotations = list(
    list(
      text = '<<final_caption>>',
      showarrow = FALSE,
      xref = 'paper',
      yref = 'paper',
      x = 0.9,
      y = -0.1,
      xanchor = 'right',
      yanchor = 'top',
      font = list(size = 17, color = '#C0C0C0')
    )
  )
)

print(p)

\```

<<plot.D.Notes.shared>>

See @<<fig.plot.D.ref>>. 
", .open = "<<", .close = ">>")

# Create a temporary file
temp_file <- tempfile(paste0("file_", i), fileext = ".qmd")
tempfiles <- c(tempfiles, temp_file)

# Write the content to the temporary file
writeLines(rmd_content, temp_file)
}
```


```{r, results='asis'}
#| echo: false

for (file in tempfiles) {
  cat(knitr::knit_child(file, quiet = TRUE), sep = '\n')
}
```
